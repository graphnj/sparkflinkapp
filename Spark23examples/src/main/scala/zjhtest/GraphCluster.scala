package zjhtest

import java.util.Date

import scala.collection.mutable
import scala.collection.mutable.ArrayBuffer

/**
  * @auth zhujinhua 0049003202
  * @desc 在聚类中处理比较结果pair的算法实现
  * @date 2019/10/31 11:28
  */

object GraphCluster {

  def processCompareResultold(successIndices: Array[(Int, Int)]): scala.collection.mutable.Map[Int, mutable.Set[Int]] = {
    //每个特征与其归属的pair，如果一个特征已归属于一个融合id，则与该特征相似的新特征也归于该融合id，即传递性
    val src2fusedMap = scala.collection.mutable.Map[Int, Int]()
    val groupMapSet = scala.collection.mutable.Map[Int, mutable.Set[Int]]()

    val results = successIndices
      //      .filter(data => data._1 <= data._2)   //非对称矩阵，
      .map(data => {
      var newMemberset = mutable.Set[Int]()

      if (src2fusedMap.contains(data._1) || src2fusedMap.contains(data._2)) {
        //针对data._1或data._2已归属某id的情形
        //newtargetId为选中的目的id，oldtargetid为可选的，
        var oldtargetId: Int = Int.MaxValue
        //data._1若有归属则以其为newtarget，同时再看data._2若存在归属的话则其归属为oldtarget
        //data._1若无归属，则data._2必有归属，
        val newtargetId = src2fusedMap.get(data._1) match {
          case None => src2fusedMap.get(data._2).get
          case _ => {
            if (src2fusedMap.contains(data._2)) {
              oldtargetId = src2fusedMap.get(data._2).get
            }
            src2fusedMap.get(data._1).get
          }
        }


        //data._1,data._2,及oldtargetid，排除掉newtargetid(针对newtargetid与data._*重复的情形)
        val mergeIdSet = mutable.Set[Int]()
        mergeIdSet += data._1
        mergeIdSet += data._2
        if (oldtargetId != Int.MaxValue) mergeIdSet += oldtargetId
        mergeIdSet.remove(newtargetId)

        //针对每个mergeIdSet，将其member合并到newMemberset中，
        // 同时将该oneid从最终的聚类簇groupMapSet中移除(门派被兼并)
        for (oneid <- mergeIdSet) {
          if (groupMapSet.contains(oneid)) {
            //oneid在与targetId合并前已积攒的成员进行合并
            val memberOfOneid = groupMapSet.get(oneid).get
            newMemberset ++= memberOfOneid + oneid

            //原归属oneid的全转为归属targetId
            memberOfOneid.map(x => {
              src2fusedMap += (x -> newtargetId)
            })
            src2fusedMap += (oneid -> newtargetId)

            //已合并，后续(data._1,xx,similarity)也将归到targetId中，此处删除
            groupMapSet.remove(oneid)
          }
          else {
            newMemberset += oneid
            src2fusedMap += (oneid -> newtargetId)
          }
        }

        //加入该一统江湖的newTargetId的原有成员，如果存在的话
        if (groupMapSet.contains(newtargetId)) {
          newMemberset = newMemberset ++ groupMapSet.get(newtargetId).get
        }

        groupMapSet += (newtargetId -> newMemberset)


      } else {
        //针对(data._1,data._2,similarity)中的两个id均未有归属的时候，则设定data._1为新掌门。
        val newtargetId = data._1
        if (groupMapSet.contains(data._1)) {
          newMemberset = groupMapSet.get(data._1).get
        }
        if (groupMapSet.contains(data._2)) {
          val memberOfOneid = groupMapSet.get(data._2).get
          newMemberset ++= memberOfOneid
          //原归属data._2的全转为归属targetId
          memberOfOneid.map(x => {
            src2fusedMap += (x -> newtargetId)
          })
        }
        newMemberset += data._2

        groupMapSet += (newtargetId -> newMemberset)

        if (data._1 != data._2) {
          groupMapSet.remove(data._2)
          src2fusedMap += (data._2 -> newtargetId)
        }
      }
    })

    groupMapSet

  }


  def processCompareResult(successIndices: Array[(Int, Int)]): scala.collection.mutable.Map[Int, mutable.Set[Int]] = {
    // 输出一个id及其相关id的set
    val groupMapSet = mutable.Map[Int, mutable.Set[Int]]()

    val bidirectSuccessIndices = ArrayBuffer[(Int,Int)]()
    successIndices.foreach(x=>{
      bidirectSuccessIndices.append((x._1,x._2))
      bidirectSuccessIndices.append((x._2,x._1))
    })
    // 去重后生成{(1,Set(1,2,7,5)),(2,Set(8,7,9,4,2)),...}的groupMapSet
    bidirectSuccessIndices.distinct.groupBy(_._1).foreach(x=>{
      groupMapSet += (x._1 -> mutable.Set(x._2.map(_._2.toInt):_*))
    })

    var end=false
    //保存(id,Set(subid)), 此处Set(subid)为新加入id的子id，需要对其检查其是否是也作为一个id存在
    val groupMapSetWaitingHandle = groupMapSet.clone
    //作为一个查询的字典，不能减少
    val groupMapSetImmutable = groupMapSet.clone
    while(!end){
      end=true
      groupMapSetWaitingHandle.map(x=>{
        val valsetold=groupMapSet(x._1) //存储x._1这个id对应的子id
        val valsetnew = valsetold.clone() //clone备份

        // 对每个id的相关子id集合中每个元素看其是否还在groupMapSet中作为一个key，若是，则合并并移除
        valsetnew.map(v=>{
          if (v!=x._1 && groupMapSetImmutable.contains(v)) {
            end=false
            //加入子id的子id后，需要进一步检查，end设为未结束
            valsetnew++=groupMapSetImmutable(v)
            //println("...valset cnt="+valset.size)
            //v被合并后，其不再被处理
            groupMapSet.remove(v)
            groupMapSetWaitingHandle.remove(v)
          }
        })
        //更新x._1的新fllowing id's Set
        groupMapSet += (x._1->valsetnew)
        val incr = valsetnew.diff(valsetold)
        if(incr.size>0) groupMapSetWaitingHandle += (x._1->incr)else groupMapSetWaitingHandle.remove(x._1)

      })
    }

    groupMapSet
  }


  def main(args: Array[String]): Unit = {
    //val successIndices=Array[(Int,Int)]((1,2),(1,3),(1,4),(2,3),(2,6),(6,9),(6,3),(6,10))
    //val successIndices=Array[(Int,Int)]((9,0), (31,0), (130,0), (152,0), (176,0), (66,1), (97,1), (106,1), (163,1), (194,1), (65,2), (140,2), (183,2), (186,2), (199,2), (66,3), (97,3), (106,3), (163,3), (194,3), (49,4), (114,4), (133,4), (184,4), (185,4), (9,5), (31,5), (130,5), (152,5), (176,5), (36,6), (87,6), (132,6), (166,6), (229,6), (66,7), (97,7), (106,7), (163,7), (194,7), (69,8), (146,8), (168,8), (203,8), (214,8), (9,9), (31,9), (130,9), (152,9), (176,9), (66,10), (97,10), (106,10), (163,10), (194,10), (11,11), (14,11), (127,11), (153,11), (162,11), (65,12), (140,12), (183,12), (186,12), (199,12), (17,13), (21,13), (100,13), (165,13), (228,13), (11,14), (14,14), (127,14), (153,14), (162,14), (104,15), (122,15), (136,15), (170,15), (218,15), (96,16), (107,16), (138,16), (189,16), (204,16), (17,17), (21,17), (100,17), (165,17), (228,17), (11,18), (14,18), (127,18), (153,18), (162,18), (49,19), (114,19), (133,19), (184,19), (185,19), (66,20), (97,20), (106,20), (163,20), (194,20), (17,21), (21,21), (100,21), (165,21), (228,21), (22,22), (42,22), (67,22), (68,22), (70,22), (9,23), (31,23), (130,23), (152,23), (176,23), (9,24), (31,24), (130,24), (152,24), (176,24), (104,25), (122,25), (136,25), (170,25), (218,25), (49,26), (114,26), (133,26), (184,26), (185,26), (36,27), (87,27), (132,27), (166,27), (229,27), (11,28), (14,28), (127,28), (153,28), (162,28), (11,29), (14,29), (127,29), (153,29), (162,29), (11,30), (14,30), (127,30), (153,30), (162,30), (9,31), (31,31), (130,31), (152,31), (176,31), (96,32), (107,32), (138,32), (189,32), (204,32), (69,33), (146,33), (168,33), (203,33), (214,33), (104,34), (122,34), (136,34), (170,34), (218,34), (11,35), (14,35), (127,35), (153,35), (162,35), (36,36), (87,36), (132,36), (166,36), (229,36), (37,37), (119,37), (155,37), (180,37), (190,37), (53,38), (64,38), (99,38), (150,38), (225,38), (11,39), (14,39), (127,39), (153,39), (162,39), (65,40), (140,40), (183,40), (186,40), (199,40), (36,41), (87,41), (132,41), (166,41), (229,41), (22,42), (42,42), (67,42), (68,42), (70,42), (9,43), (31,43), (130,43), (152,43), (176,43), (53,44), (64,44), (99,44), (150,44), (225,44), (53,45), (64,45), (99,45), (150,45), (225,45), (37,46), (119,46), (155,46), (180,46), (190,46), (37,47), (119,47), (155,47), (180,47), (190,47), (22,48), (42,48), (67,48), (68,48), (70,48), (49,49), (114,49), (133,49), (184,49), (185,49), (49,50), (114,50), (133,50), (184,50), (185,50), (11,51), (14,51), (127,51), (153,51), (162,51), (104,52), (122,52), (136,52), (170,52), (218,52), (53,53), (64,53), (99,53), (150,53), (225,53), (9,54), (31,54), (130,54), (152,54), (176,54), (66,55), (97,55), (106,55), (163,55), (194,55), (9,56), (31,56), (130,56), (152,56), (176,56), (96,57), (107,57), (138,57), (189,57), (204,57), (9,58), (31,58), (130,58), (152,58), (176,58), (49,59), (114,59), (133,59), (184,59), (185,59), (65,60), (140,60), (183,60), (186,60), (199,60), (65,61), (140,61), (183,61), (186,61), (199,61), (65,62), (140,62), (183,62), (186,62), (199,62), (49,63), (114,63), (133,63), (184,63), (185,63), (53,64), (64,64), (99,64), (150,64), (225,64), (65,65), (140,65), (183,65), (186,65), (199,65), (66,66), (97,66), (106,66), (163,66), (194,66), (22,67), (42,67), (67,67), (68,67), (70,67), (22,68), (42,68), (67,68), (68,68), (70,68), (69,69), (146,69), (168,69), (203,69), (214,69), (22,70), (42,70), (67,70), (68,70), (70,70), (9,71), (31,71), (130,71), (152,71), (176,71), (66,72), (97,72), (106,72), (163,72), (194,72), (66,73), (97,73), (106,73), (163,73), (194,73), (104,74), (122,74), (136,74), (170,74), (218,74), (75,75), (40,75), (110,75), (181,75), (183,75), (53,76), (64,76), (99,76), (150,76), (225,76), (36,77), (87,77), (132,77), (166,77), (229,77), (11,78), (14,78), (127,78), (153,78), (162,78), (37,79), (119,79), (155,79), (180,79), (190,79), (104,80), (122,80), (136,80), (170,80), (218,80), (36,81), (87,81), (132,81), (166,81), (229,81), (96,82), (107,82), (138,82), (189,82), (204,82), (96,83), (107,83), (138,83), (189,83), (204,83), (11,84), (14,84), (127,84), (153,84), (162,84), (37,85), (119,85), (155,85), (180,85), (190,85), (11,86), (14,86), (127,86), (153,86), (162,86), (36,87), (87,87), (132,87), (166,87), (229,87), (104,88), (122,88), (136,88), (170,88), (218,88), (37,89), (119,89), (155,89), (180,89), (190,89), (36,90), (87,90), (132,90), (166,90), (229,90), (96,91), (107,91), (138,91), (189,91), (204,91), (37,92), (119,92), (155,92), (180,92), (190,92), (69,93), (146,93), (168,93), (203,93), (214,93), (96,94), (107,94), (138,94), (189,94), (204,94), (36,95), (87,95), (132,95), (166,95), (229,95), (96,96), (107,96), (138,96), (189,96), (204,96), (66,97), (97,97), (106,97), (163,97), (194,97), (66,98), (97,98), (106,98), (163,98), (194,98), (53,99), (64,99), (99,99), (150,99), (225,99), (17,100), (21,100), (100,100), (165,100), (228,100), (66,101), (97,101), (106,101), (163,101), (194,101), (104,102), (122,102), (136,102), (170,102), (218,102), (96,103), (107,103), (138,103), (189,103), (204,103), (104,104), (122,104), (136,104), (170,104), (218,104), (36,105), (87,105), (132,105), (166,105), (229,105), (66,106), (97,106), (106,106), (163,106), (194,106), (96,107), (107,107), (138,107), (189,107), (204,107), (69,108), (146,108), (168,108), (203,108), (214,108), (11,109), (14,109), (127,109), (153,109), (162,109), (65,110), (140,110), (183,110), (186,110), (199,110), (36,111), (87,111), (132,111), (166,111), (229,111), (9,112), (31,112), (130,112), (152,112), (176,112), (65,113), (140,113), (183,113), (186,113), (199,113), (49,114), (114,114), (133,114), (184,114), (185,114), (96,115), (107,115), (138,115), (189,115), (204,115), (53,116), (64,116), (99,116), (150,116), (225,116), (66,117), (97,117), (106,117), (163,117), (194,117), (22,118), (42,118), (67,118), (68,118), (70,118), (37,119), (119,119), (155,119), (180,119), (190,119), (96,120), (107,120), (138,120), (189,120), (204,120), (36,121), (87,121), (132,121), (166,121), (229,121), (104,122), (122,122), (136,122), (170,122), (218,122), (49,123), (114,123), (133,123), (184,123), (185,123), (11,124), (14,124), (127,124), (153,124), (162,124), (96,125), (107,125), (138,125), (189,125), (204,125), (96,126), (107,126), (138,126), (189,126), (204,126), (11,127), (14,127), (127,127), (153,127), (162,127), (37,128), (119,128), (155,128), (180,128), (190,128), (65,129), (140,129), (183,129), (186,129), (199,129), (9,130), (31,130), (130,130), (152,130), (176,130), (36,131), (87,131), (132,131), (166,131), (229,131), (36,132), (87,132), (132,132), (166,132), (229,132), (49,133), (114,133), (133,133), (184,133), (185,133), (37,134), (119,134), (155,134), (180,134), (190,134), (49,135), (114,135), (133,135), (184,135), (185,135), (104,136), (122,136), (136,136), (170,136), (218,136), (17,137), (21,137), (100,137), (165,137), (228,137), (96,138), (107,138), (138,138), (189,138), (204,138), (11,139), (14,139), (127,139), (153,139), (162,139), (65,140), (140,140), (183,140), (186,140), (199,140), (66,141), (97,141), (106,141), (163,141), (194,141), (69,142), (146,142), (168,142), (203,142), (214,142), (66,143), (97,143), (106,143), (163,143), (194,143), (22,144), (42,144), (67,144), (68,144), (70,144), (9,145), (31,145), (130,145), (152,145), (176,145), (69,146), (146,146), (168,146), (203,146), (214,146), (104,147), (122,147), (136,147), (170,147), (218,147), (69,148), (146,148), (168,148), (203,148), (214,148), (36,149), (87,149), (132,149), (166,149), (229,149), (53,150), (64,150), (99,150), (150,150), (225,150), (65,151), (140,151), (183,151), (186,151), (199,151), (9,152), (31,152), (130,152), (152,152), (176,152), (11,153), (14,153), (127,153), (153,153), (162,153), (65,154), (140,154), (183,154), (186,154), (199,154), (37,155), (119,155), (155,155), (180,155), (190,155), (96,156), (107,156), (138,156), (189,156), (204,156), (66,157), (97,157), (106,157), (163,157), (194,157), (36,158), (87,158), (132,158), (166,158), (229,158), (96,159), (107,159), (138,159), (189,159), (204,159), (37,160), (119,160), (155,160), (180,160), (190,160), (53,161), (64,161), (99,161), (150,161), (225,161), (11,162), (14,162), (127,162), (153,162), (162,162), (66,163), (97,163), (106,163), (163,163), (194,163), (69,164), (146,164), (168,164), (203,164), (214,164), (17,165), (21,165), (100,165), (165,165), (228,165), (36,166), (87,166), (132,166), (166,166), (229,166), (104,167), (122,167), (136,167), (170,167), (218,167), (69,168), (146,168), (168,168), (203,168), (214,168), (11,169), (14,169), (127,169), (153,169), (162,169), (104,170), (122,170), (136,170), (170,170), (218,170), (11,171), (14,171), (127,171), (153,171), (162,171), (49,172), (114,172), (133,172), (184,172), (185,172), (104,173), (122,173), (136,173), (170,173), (218,173), (104,174), (122,174), (136,174), (170,174), (218,174), (37,175), (119,175), (155,175), (180,175), (190,175), (9,176), (31,176), (130,176), (152,176), (176,176), (66,177), (97,177), (106,177), (163,177), (194,177), (65,178), (140,178), (183,178), (186,178), (199,178), (104,179), (122,179), (136,179), (170,179), (218,179), (37,180), (119,180), (155,180), (180,180), (190,180), (65,181), (140,181), (183,181), (186,181), (199,181), (37,182), (119,182), (155,182), (180,182), (190,182), (65,183), (140,183), (183,183), (186,183), (199,183), (49,184), (114,184), (133,184), (184,184), (185,184), (49,185), (114,185), (133,185), (184,185), (185,185), (65,186), (140,186), (183,186), (186,186), (199,186), (9,187), (31,187), (130,187), (152,187), (176,187), (53,188), (64,188), (99,188), (150,188), (225,188), (96,189), (107,189), (138,189), (189,189), (204,189), (37,190), (119,190), (155,190), (180,190), (190,190), (37,191), (119,191), (155,191), (180,191), (190,191), (65,192), (140,192), (183,192), (186,192), (199,192), (104,193), (122,193), (136,193), (170,193), (218,193), (66,194), (97,194), (106,194), (163,194), (194,194), (65,195), (140,195), (183,195), (186,195), (199,195), (53,196), (64,196), (99,196), (150,196), (225,196), (22,197), (42,197), (67,197), (68,197), (70,197), (17,198), (21,198), (100,198), (165,198), (228,198), (65,199), (140,199), (183,199), (186,199), (199,199), (66,200), (97,200), (106,200), (163,200), (194,200), (17,201), (21,201), (100,201), (165,201), (228,201), (49,202), (114,202), (133,202), (184,202), (185,202), (69,203), (146,203), (168,203), (203,203), (214,203), (96,204), (107,204), (138,204), (189,204), (204,204), (37,205), (119,205), (155,205), (180,205), (190,205), (22,206), (42,206), (67,206), (68,206), (70,206), (36,207), (87,207), (132,207), (166,207), (229,207), (9,208), (31,208), (130,208), (152,208), (176,208), (69,209), (146,209), (168,209), (203,209), (214,209), (11,210), (14,210), (127,210), (153,210), (162,210), (96,211), (107,211), (138,211), (189,211), (204,211), (37,212), (119,212), (155,212), (180,212), (190,212), (53,213), (64,213), (99,213), (150,213), (225,213), (69,214), (146,214), (168,214), (203,214), (214,214), (49,215), (114,215), (133,215), (184,215), (185,215), (96,216), (107,216), (138,216), (189,216), (204,216), (65,217), (140,217), (183,217), (186,217), (199,217), (104,218), (122,218), (136,218), (170,218), (218,218), (36,219), (87,219), (132,219), (166,219), (229,219), (17,220), (21,220), (100,220), (165,220), (228,220), (49,221), (114,221), (133,221), (184,221), (185,221), (65,222), (140,222), (183,222), (186,222), (199,222), (65,223), (140,223), (183,223), (186,223), (199,223), (49,224), (114,224), (133,224), (184,224), (185,224), (53,225), (64,225), (99,225), (150,225), (225,225), (11,226), (14,226), (127,226), (153,226), (162,226), (69,227), (146,227), (168,227), (203,227), (214,227), (17,228), (21,228), (100,228), (165,228), (228,228), (36,229), (87,229), (132,229), (166,229), (229,229), (36,230), (87,230), (132,230), (166,230), (229,230), (65,231), (140,231), (183,231), (186,231), (199,231), (53,232), (64,232), (99,232), (150,232), (225,232), (9,233), (31,233), (130,233), (152,233), (176,233), (104,234), (122,234), (136,234), (170,234), (218,234), (53,235), (64,235), (99,235), (150,235), (225,235), (96,236), (107,236), (138,236), (189,236), (204,236), (65,237), (140,237), (183,237), (186,237), (199,237), (22,238), (42,238), (67,238), (68,238), (70,238), (65,239), (140,239), (183,239), (186,239), (199,239))

    //val successIndices=Array[(Int,Int)]((1,2),(1,3),(1,4),(2,3),(2,6),(9,6),(10,3))

    val successIndicesd=Array[(Int,Int,Double)]((0,0,0.0), (144,0,122011.0), (96,0,148361.0), (1,1,0.0), (73,1,115317.0), (25,1,150413.0), (2,2,0.0), (146,2,135363.0), (3,3,0.0), (4,4,0.0), (148,4,118750.0), (100,4,170393.0), (5,5,0.0), (77,5,175906.0), (6,6,0.0), (78,6,86798.0), (102,6,88733.0), (150,6,140772.0), (7,7,0.0), (31,7,90001.0), (79,7,96687.0), (223,7,129923.0), (8,8,0.0), (9,9,0.0), (81,9,142863.0), (10,10,0.0), (154,10,100751.0), (82,10,157415.0), (11,11,0.0), (155,11,174416.0), (12,12,0.0), (13,13,0.0), (85,13,125664.0), (14,14,0.0), (15,15,0.0), (16,16,0.0), (40,16,88647.0), (88,16,106475.0), (17,17,0.0), (18,18,0.0), (90,18,110589.0), (19,19,0.0), (20,20,0.0), (68,20,126978.0), (164,20,129704.0), (44,20,157692.0), (21,21,0.0), (93,21,169448.0), (22,22,0.0), (23,23,0.0), (95,23,100273.0), (167,23,118458.0), (119,23,146438.0), (47,23,165795.0), (24,24,0.0), (192,24,142917.0), (168,24,165935.0), (25,25,0.0), (1,25,150413.0), (73,25,171204.0), (26,26,0.0), (218,26,113463.0), (27,27,0.0), (28,28,0.0), (29,29,0.0), (77,29,134431.0), (149,29,157231.0), (30,30,0.0), (198,30,76599.0), (222,30,110227.0), (126,30,120411.0), (174,30,141840.0), (31,31,0.0), (7,31,90001.0), (79,31,104302.0), (223,31,137072.0), (32,32,0.0), (224,32,129971.0), (33,33,0.0), (225,33,176007.0), (34,34,0.0), (226,34,140173.0), (35,35,0.0), (83,35,121470.0), (36,36,0.0), (228,36,158116.0), (37,37,0.0), (38,38,0.0), (39,39,0.0), (40,40,0.0), (88,40,108634.0), (41,41,0.0), (233,41,145273.0), (42,42,0.0), (43,43,0.0), (44,44,0.0), (92,44,43524.0), (116,44,57229.0), (68,44,123304.0), (164,44,172140.0), (45,45,0.0), (46,46,0.0), (47,47,0.0), (23,47,165795.0), (48,48,0.0), (49,49,0.0), (120,49,138343.0), (50,50,0.0), (98,50,116870.0), (51,51,0.0), (147,51,136255.0), (99,51,152624.0), (52,52,0.0), (195,52,105813.0), (123,52,160056.0), (53,53,0.0), (77,53,135997.0), (54,54,0.0), (125,54,138232.0), (197,54,165241.0), (55,55,0.0), (103,55,167006.0), (56,56,0.0), (57,57,0.0), (200,57,155017.0), (58,58,0.0), (59,59,0.0), (107,59,84768.0), (60,60,0.0), (61,61,0.0), (132,61,139479.0), (62,62,0.0), (63,63,0.0), (64,64,0.0), (65,65,0.0), (208,65,104300.0), (136,65,138583.0), (66,66,0.0), (137,66,148036.0), (67,67,0.0), (115,67,79629.0), (138,67,131522.0), (68,68,0.0), (92,68,111532.0), (116,68,111605.0), (164,68,121650.0), (44,68,123304.0), (69,69,0.0), (165,69,128153.0), (70,70,0.0), (141,70,167476.0), (71,71,0.0), (142,71,171102.0), (72,72,0.0), (0,72,91206.0), (144,72,124907.0), (96,72,135187.0), (73,73,0.0), (1,73,115317.0), (25,73,171204.0), (74,74,0.0), (75,75,0.0), (76,76,0.0), (77,77,0.0), (29,77,134431.0), (53,77,135997.0), (5,77,175906.0), (78,78,0.0), (6,78,86798.0), (102,78,135363.0), (79,79,0.0), (7,79,96687.0), (31,79,104302.0), (223,79,144100.0), (80,80,0.0), (224,80,121806.0), (32,80,137245.0), (176,80,140954.0), (81,81,0.0), (82,82,0.0), (154,82,114358.0), (10,82,157415.0), (83,83,0.0), (35,83,121470.0), (84,84,0.0), (156,84,175630.0), (85,85,0.0), (13,85,125664.0), (86,86,0.0), (87,87,0.0), (88,88,0.0), (89,89,0.0), (90,90,0.0), (18,90,110589.0), (91,91,0.0), (163,91,159261.0), (92,92,0.0), (116,92,38363.0), (44,92,43524.0), (68,92,111532.0), (93,93,0.0), (21,93,169448.0), (94,94,0.0), (95,95,0.0), (23,95,100273.0), (167,95,145199.0), (119,95,167077.0), (96,96,0.0), (144,96,132264.0), (72,96,135187.0), (0,96,148361.0), (97,97,0.0), (98,98,0.0), (50,98,116870.0), (99,99,0.0), (51,99,152624.0), (147,99,168847.0), (100,100,0.0), (4,100,170393.0), (101,101,0.0), (149,101,151398.0), (102,102,0.0), (6,102,88733.0), (78,102,135363.0), (103,103,0.0), (55,103,167006.0), (104,104,0.0), (105,105,0.0), (106,106,0.0), (107,107,0.0), (59,107,84768.0), (130,107,149003.0), (108,108,0.0), (156,108,152368.0), (109,109,0.0), (110,110,0.0), (158,110,142020.0), (111,111,0.0), (159,111,172964.0), (112,112,0.0), (113,113,0.0), (161,113,100242.0), (114,114,0.0), (115,115,0.0), (67,115,79629.0), (138,115,122023.0), (116,116,0.0), (92,116,38363.0), (44,116,57229.0), (68,116,111605.0), (164,116,161001.0), (117,117,0.0), (118,118,0.0), (166,118,147511.0), (119,119,0.0), (167,119,118802.0), (95,119,167077.0), (120,120,0.0), (49,120,138343.0), (145,120,162009.0), (121,121,0.0), (193,121,87051.0), (122,122,0.0), (194,122,118961.0), (123,123,0.0), (52,123,160056.0), (124,124,0.0), (196,124,168107.0), (125,125,0.0), (197,125,114497.0), (54,125,138232.0), (126,126,0.0), (174,126,117139.0), (30,126,120411.0), (222,126,149218.0), (127,127,0.0), (56,127,81294.0), (128,128,0.0), (129,129,0.0), (130,130,0.0), (59,130,127657.0), (107,130,149003.0), (131,131,0.0), (132,132,0.0), (61,132,139479.0), (133,133,0.0), (134,134,0.0), (135,135,0.0), (136,136,0.0), (208,136,113837.0), (65,136,138583.0), (137,137,0.0), (66,137,148036.0), (138,138,0.0), (115,138,122023.0), (67,138,131522.0), (139,139,0.0), (140,140,0.0), (212,140,155915.0), (141,141,0.0), (70,141,167476.0), (142,142,0.0), (71,142,171102.0), (214,142,176033.0), (143,143,0.0), (191,143,122231.0), (144,144,0.0), (0,144,122011.0), (72,144,124907.0), (96,144,132264.0), (145,145,0.0), (49,145,166466.0), (146,146,0.0), (2,146,135363.0), (74,146,157332.0), (147,147,0.0), (51,147,136255.0), (148,148,0.0), (4,148,118750.0), (149,149,0.0), (101,149,151398.0), (29,149,157231.0), (150,150,0.0), (6,150,140772.0), (78,150,164366.0), (151,151,0.0), (152,152,0.0), (153,153,0.0), (154,154,0.0), (10,154,100751.0), (82,154,114358.0), (155,155,0.0), (11,155,174416.0), (156,156,0.0), (108,156,152368.0), (84,156,175630.0), (157,157,0.0), (158,158,0.0), (110,158,142020.0), (159,159,0.0), (111,159,172964.0), (160,160,0.0), (161,161,0.0), (162,162,0.0), (163,163,0.0), (91,163,159261.0), (164,164,0.0), (68,164,121650.0), (20,164,129704.0), (116,164,161001.0), (92,164,168520.0), (165,165,0.0), (166,166,0.0), (118,166,147511.0), (167,167,0.0), (23,167,118458.0), (119,167,118802.0), (95,167,145199.0), (168,168,0.0), (24,168,165935.0), (169,169,0.0), (170,170,0.0), (122,170,110349.0), (171,171,0.0), (172,172,0.0), (220,172,161274.0), (173,173,0.0), (174,174,0.0), (126,174,117139.0), (198,174,117615.0), (30,174,141840.0), (222,174,150151.0), (175,175,0.0), (176,176,0.0), (80,176,140954.0), (224,176,147620.0), (177,177,0.0), (178,178,0.0), (179,179,0.0), (180,180,0.0), (228,180,83450.0), (204,180,174035.0), (181,181,0.0), (182,182,0.0), (183,183,0.0), (184,184,0.0), (232,184,146013.0), (185,185,0.0), (186,186,0.0), (187,187,0.0), (211,187,180204.0), (188,188,0.0), (189,189,0.0), (190,190,0.0), (238,190,140863.0), (191,191,0.0), (143,191,122231.0), (192,192,0.0), (216,192,139349.0), (24,192,142917.0), (193,193,0.0), (121,193,87051.0), (194,194,0.0), (122,194,118961.0), (195,195,0.0), (52,195,105813.0), (196,196,0.0), (124,196,168107.0), (197,197,0.0), (125,197,114497.0), (54,197,165241.0), (198,198,0.0), (30,198,76599.0), (222,198,103632.0), (126,198,125976.0), (199,199,0.0), (200,200,0.0), (201,201,0.0), (202,202,0.0), (178,202,100499.0), (203,203,0.0), (204,204,0.0), (228,204,162389.0), (180,204,174035.0), (205,205,0.0), (206,206,0.0), (207,207,0.0), (208,208,0.0), (65,208,104300.0), (136,208,113837.0), (209,209,0.0), (210,210,0.0), (211,211,0.0), (187,211,180204.0), (212,212,0.0), (213,213,0.0), (214,214,0.0), (71,214,112545.0), (142,214,176033.0), (215,215,0.0), (216,216,0.0), (217,217,0.0), (218,218,0.0), (26,218,113463.0), (219,219,0.0), (220,220,0.0), (172,220,161274.0), (221,221,0.0), (222,222,0.0), (198,222,103632.0), (30,222,110227.0), (223,223,0.0), (7,223,129923.0), (31,223,137072.0), (79,223,144100.0), (224,224,0.0), (80,224,121806.0), (32,224,129971.0), (176,224,147620.0), (225,225,0.0), (226,226,0.0), (34,226,140173.0), (227,227,0.0), (228,228,0.0), (180,228,83450.0), (229,229,0.0), (230,230,0.0), (231,231,0.0), (232,232,0.0), (184,232,146013.0), (233,233,0.0), (41,233,145273.0), (234,234,0.0), (186,234,104261.0), (235,235,0.0), (236,236,0.0), (237,237,0.0), (238,238,0.0), (239,239,0.0))
    val xx=Array[(Int,Int,Float)]((192,192,0.0f),(216,192,139349.0f),(216,216,0.0f),
      (168,168,0.0f),(24,24,0.0f),(192,24,142917.0f),
      (168,24,165935.0f), (24,168,165935.0f), (24,192,142917.0f))
    val successIndices = xx.map(x=>(x._1,x._2))
    val TESTTIMES=1

    val start=new Date().getTime
    //for(i<-1 to TESTTIMES) {
      val anew = processCompareResult(successIndices)
      print("\nanew:")
      anew.foreach(x=>print("\n["+x._1+"]")+":"+x._2.foreach(x=>print(x+", ")))
      var cnt=0
      anew.foreach(x=>cnt+=(x._2.size))
      println("cnt="+cnt)
    //}
    val end=new Date().getTime
    println("new="+(end-start))



    val start2=new Date().getTime
    //for(i<-1 to TESTTIMES) {
      val aold = processCompareResultold(successIndices)
      print("\naold:")
      //aold.foreach(x => print("\n[" + x._1 + "]") + ":" + x._2.foreach(x => print(x + ", ")))
var cnt2=0
      aold.foreach(x=>cnt2+=(x._2.size))
      println("old cnt="+cnt2)

    //}


    //val anewmap=anew.toMap
    //anew.map(_._2).flatMap(_.toSeq).foreach(println)
    //aold.foreach()
    val end2=new Date().getTime
    println("old="+(end2-start2))
/*
    val start3=new Date().getTime
    for(i<-1 to TESTTIMES) {
      val anew = processCompareResult(successIndices)
      //print("\nanew:")
      //anew.foreach(x=>println("\n["+x._1+"]")+":"+x._2.foreach(x=>print(x+", ")))
    }
    val end3=new Date().getTime
    println("new="+(end3-start3))
    */
  }
}
